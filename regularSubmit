#!/bin/bash

function usage {

   echo""
   echo "=========================================================================="
   echo "Interface for submitting a single cluster job with singularity"
   echo ""
   echo "--------------------------------------------------------------------------"
   echo "Usage: $cmdname <optional flags>  <command to run>"
   echo "--------------------------------------------------------------------------"
   echo ""
   echo "optional flags:"
   echo ""
   echo " -t : test-mode, don/'t actually submit any jobs"
   echo " -n : ninja-mode, delete job file and hide command in log file (for passwords in getDicomTgz)"
   echo " -E <env_script>:  script to source for env setup"
   echo ""
   echo ""
   echo " Required resources:"
   echo " -j <job-template> :  sets requested resources"
   echo "	Regular (default):	8core/32gb/24h"
   echo "	LongSkinny:		1core/4gb/72h"
   echo "	ShortFat:		32core/128gb/3h"
   echo ""
   echo ""
   echo " SLURM Job dependencies for pipelining (man sbatch for more details):"
   echo "  -d aftercorr:jobid[:jobid]	: each subj depends on completed subj in submitted job ids"  
   echo "  -d afterok:jobid[:jobid]	: each subj depends on all completed subj in submitted job id"
   echo ""


}

host=`hostname`
if [ ! ${host:0:3} = "gra" ]
then
	echo "Please ssh to graham.sharcnet.ca before using $0" >&2
	exit 1
fi



#run a pipeline job on the cluster
#pipeline jobs take subjids as args

if [ "$#" -lt 1 ]
then 
  usage
  exit 1
fi

job_template=Regular
depends=""
testmode=0
enable_wait=0
ninja=0

output_dir=`realpath $PWD`

while getopts "j:d:tWnN:E:" options; do
 case $options in
    j ) echo "	Using job template: $OPTARG" >&2
	job_template=$OPTARG;;
    d ) echo "	Using dependencies: $OPTARG" >&2
	depends=$OPTARG;;
    t ) echo "	Using test-mode (no submit jobs)" >&2
	testmode=1;;
    W ) echo "  Wait until job completes" >&2
	enable_wait=1;;
    n ) echo "  Using ninja mode" >&2
	ninja=1;;
    N ) echo "	Using job name: $OPTARG" >&2
	cmdname=$OPTARG;;
    E ) echo "	Sourcing $OPTARG in each job" >&2
	envscript=$OPTARG;;
    * ) usage
	exit 1;;
 esac
done


shift $((OPTIND-1))

run_cmd=$1


if [ ! -n "$cmdname" ]
then
cmdname=${run_cmd##*/} #remove up to leading slash
fi


echo $cmdname >&2


job_dir=$output_dir/jobs
mkdir -p $job_dir

job=$job_dir/$cmdname.job

execpath=`dirname $0`
execpath=`realpath $execpath`
cp $execpath/job-templates/${job_template}.job $job  

echo "#SBATCH --job-name=$cmdname" >> $job
echo "#SBATCH --output=$job_dir/${cmdname}.%A.out" >> $job
if [ "$ninja" = 1 ]
then
echo "echo Ninja-mode - delete job file" >> $job
else
echo "echo CMD: $@" >>$job
fi
echo "echo START_TIME: \`date\`" >>$job
echo cd `pwd` >> $job
echo $@ >> $job
echo "RETURNVAL=\$?" >> $job
echo "echo RETURNVAL=\$RETURNVAL" >>$job
echo "echo END_TIME: \`date\`" >>$job
echo "exit \$RETURNVAL" >> $job
echo -n "		Queuing job, $depends ... " >&2


if [ "$testmode" = 0 ]
then

if [ "$enable_wait" == 1 ]
then
message=`sbatch --dependency=$depends -W $job`
else
message=`sbatch --dependency=$depends $job`
fi

# Extract job identifier from SLURM's message.
if ! echo ${message} | grep -q "[1-9][0-9]*$"; then 
	echo "Job(s) submission failed." >&2
	echo ${message} >&2
	exit 1
else
	jobid=$(echo ${message} | grep -oh "[1-9][0-9]*$")
fi
echo "jobid=$jobid" >&2
exec_job=$job_dir/$cmdname.$jobid.job


if [ "$ninja" = 0 ]
then
#copy instance of this job script for provenance
cp  $job $exec_job
fi

else
	jobid=$RANDOM
	echo "fake-jobid=$jobid  (test-mode: no jobs submitted)" >&2

fi


if [ "$ninja" = 1 ]
then
	#delete job
	rm -f $job
fi

echo $jobid

exit 0
