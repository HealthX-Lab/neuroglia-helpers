#!/bin/bash

function usage {
   echo""
   echo "=========================================================================="
   echo "Interface for running bids apps on the cluster with singularity"
   echo ""
   echo "  Loops through an input subject_list_txt (txt with subj id on each line)"
   echo "  Can be used to run scripts that generally take command-line parameters as:"
   echo ""
   echo "Usage: $cmdname <optional flags> <app_name> <bids_dir> <output_dir> <participant/group> <app options>"
   echo ""
   echo "Available apps:"
	cat $app_list | awk -F '\t' '{print $1 "\t"  $2}' | column -t
   echo ""
   echo "optional flags:"
   echo ""
   echo " -s <subjid> : single-subject mode, run on a single subject (must be in subjlist) instead"
   echo " -t : test-mode, don/'t actually submit any jobs"
   echo ""
   echo " Required resources:"
   echo " -j <job-template> :  sets requested resources"
   echo "	Regular (default):	8core/32gb/24h"
   echo "	LongSkinny:		1core/4gb/72h"
   echo "	ShortFat:		32core/128gb/3h"
   echo ""
   echo ""
   echo " SLURM Job dependencies for pipelining (man sbatch for more details):"
   echo "  -d aftercorr:jobid[:jobid]	: each subj depends on completed subj in submitted job ids"  
   echo "  -d afterok:jobid[:jobid]	: each subj depends on all completed subj in submitted job id"
   echo ""

 }


function getContainer {

app_name=$1
bids_app_dir=$SINGULARITY_DIR/bids-apps

linenum=1
foundmatch=0
for app in `awk -F '\t' '{print $1}' $app_list`
do

 if [ "$app" = "$app_name" ]
 then
	foundmatch=1
	break
 fi
 linenum=$((linenum+1))	
done


if [ "$foundmatch" = 0 ]
then
	echo "${app_name} does not exist in bids-app list!"  >&2 
	exit 1
fi

url=`cat $app_list | head -n $linenum | tail -n 1 |  awk -F '\t' '{print $2}'`
base_opts=`cat $app_list | head -n $linenum | tail -n 1 |  awk -F '\t' '{print $3}'`
app_job_template=`cat $app_list | head -n $linenum | tail -n 1 |  awk -F '\t' '{print $4}'`

hub=${url%%:*}
if [ "$hub" = "docker" ]
then
  #location for deployed docker images
  repo=${url#*://}
  repo=${repo%%/*}

  app=${url##*/}
  app=${app%:*}

  tag=${url##*:}

  singularity_image=$bids_app_dir/${repo}_${app}_${tag}.img
if [ ! -e $singularity_image ]
 then 
	 echo "Singularity image: $singularity_image  not found," >&2 
	echo "   run deploy_bids-apps first on your local machine" >&2 
	 exit 1
 fi


fi

if [ "$hub" = "shub" ]
then
 #use shub-cache to download if not exist, and return path to image
 singularity_image=`shub-cache $url`
 if [ ! "$?" = 0  -o ! -n "$singularity_image" -o ! -e "$singularity_image"  ]
 then
   echo "Failed to pull $url, exiting" >&2
   exit 1
 fi
 

fi

if [ "$hub" = "file" ]
then
 singularity_image=${url##file://}

 if [  ! -e "$singularity_image"  ]
 then
   echo "File $singularity_image does not exist,  exiting" >&2
   exit 1
 fi
 

fi


if [ "$override_template" = "0" -a -n "$app_job_template" ]
then
	job_template=$app_job_template 
	echo "Using job-template specified in bids-apps.tsv, $app_job_template" >&2
fi




}


execpath=`dirname $0`
execpath=`realpath $execpath`

app_list=$execpath/bids-apps.tsv

if [ ! -n "$SINGULARITY_OPTS" ]
then
	echo "SINGULARITY_OPTS not defined! exiting..." >&2
	exit 1
fi

cmd=$0
cmdname=${cmd##*/}


#add option for this
#	   #get app usage
#	   echo getting app usage
#	   singularity run -e $singularity_image


job_template=Regular
depends=""
singlesubj=""
testmode=0
subjlist=""
override_template=0


while getopts "j:d:s:tS:" options; do
 case $options in
    j ) echo "	Using job template: $OPTARG" >&2
	override_template=1
	job_template=$OPTARG;;
    d ) echo "	Using dependencies: $OPTARG" >&2
	depends=$OPTARG;;
    S ) echo "	Using subject list: $OPTARG" >&2
	subjlist=$OPTARG;;
    s ) echo "	Using single subject: $OPTARG" >&2
	singlesubj=$OPTARG;;
    t ) echo "	Using test-mode (no submit jobs)" >&2
	testmode=1;;
    * ) usage
	exit 1;;
 esac
done

shift $((OPTIND-1))

if [ "$#" -lt 1 ]
then
	usage
	exit 1
fi


app_name=$1

shift 1

getContainer $app_name



if [ "$#" -lt 3 ]
then
	usage
	echo "Usage for bids app:" >&2
	if [ -e $singularity_image ]
	then
		singularity run $singularity_image
	fi

	exit 1
fi

bids_dir=`realpath $1`
out_dir=$2
level=$3

#check validity of participant 
level_part=${level:0:5}
if [   "$level_part" != "group" -a  "$level_part" != "parti" ]
then
	echo "Required argument 3 to bids apps must be analysis level (participant/group)" >&2
	exit 1
fi

mkdir -p $out_dir
out_dir=`realpath $out_dir`

shift 3
options=$@


#check if participant_label is used as an option 
#and quit if it is found

if [[ $options = *--participant_label* ]]
then
  echo "ERROR: --participant_label should not be used with bidsBatch, use: bidsBatch -s <participant_label> instead" >&2
 exit 1
fi  



list=$bids_dir/participants.tsv

if [ ! -e $list ]
then
 echo "$list does not exist, quitting!" >&2 
 exit 1
fi

N=`tail -n +2 $list | wc -l`

if [ ! -n "$singlesubj" ]
then
	if [ ! -n "$subjlist" ]
	then
		indices="1-$N"  # all lines in subjlist, 1 to N
	else
		#pick out indices from subjlist
		indices=""
		for sub in `cat $subjlist`
		do
			N_matched=`grep -n sub-$sub $list | wc -l` 
			ind=`grep -n sub-$sub $list`
			if [ "$N_matched" = 1 ]
			then
				ind=${ind%%:*}
				if [ -n "$indices" ]
				then
					indices="$indices,$((ind-1))"
				else
					indices="$((ind-1))"
				fi
			fi
		done
	fi
else
	N_matched=`grep -n sub-$singlesubj $list | wc -l` 
	if [ "$N_matched" == 1 ]
	then
		ind_subj=`grep -n sub-$singlesubj $list`
		indices=${ind_subj%%:*}
		indices=$((indices-1))
	fi

	if [ "$N_matched" == 0 ]
	then
		echo "single_subj: $singlesubj does not match any subjids in $list!" >&2
		exit 1
	fi

	if [ "$N_matched" -gt 1 ]
	then
		echo "single_subj: $singlesubj matches multiple subjids in $subjlist!" >&2
		exit 1
	fi
fi

job_dir=$out_dir/jobs
mkdir -p $job_dir

job=$job_dir/$app_name.$level.job

execpath=`dirname $0`
execpath=`realpath $execpath`
cp $execpath/job-templates/${job_template}.job $job  


echo "#SBATCH --job-name=$app_name" >> $job

#FIX THIS LATER TO ALLOW FOR  participant1 etc.., group1, group2 ...
if [ "$level_part" == "parti" ]
then
	#submit with array, using subj and subjlist, indexed by line number (1-N)
	echo "#SBATCH --output=$job_dir/${app_name}.$level.%A_%a.out" >> $job
	echo "#SBATCH --array=$indices" >> $job
	
	echo "subj=\`tail -n +2 `realpath $list` | head -n \$SLURM_ARRAY_TASK_ID  | awk '{print \$1}' | tail -n 1\`" >> $job
	#strip off sub- from sub-LABEL
	echo "subj=\${subj##sub-}" >> $job
	echo "echo SINGULARITY_IMAGE: $singularity_image" >> $job
	echo "echo CMD: $bids_dir $out_dir $level --participant_label \$subj $base_opts $options" >>$job
	echo "echo START_TIME: \`date\`" >>$job
	echo "SCRATCH_DIR=/scratch/${USER}/\${SLURM_ARRAY_JOB_ID}_\${SLURM_ARRAY_TASK_ID}" >> $job
	echo "mkdir -p \$SCRATCH_DIR" >> $job
	echo "cd `pwd`" >> $job
	echo singularity run $SINGULARITY_OPTS $singularity_image $bids_dir $out_dir $level  --participant_label \$subj $base_opts $options >> $job
	echo "RETURNVAL=\$?" >> $job
	echo "rm -rf \$SCRATCH_DIR" >> $job
	echo "echo RETURNVAL=\$RETURNVAL" >>$job
	echo "echo END_TIME: \`date\`" >>$job
	echo "exit \$RETURNVAL" >> $job

	echo -n "		Queuing participant-level job, $depends ... " >&2
else
	#submit without arrays, for group level
	echo "#SBATCH --output=$job_dir/${app_name}.$level.%A.out" >> $job
	echo "echo SINGULARITY_IMAGE: $singularity_image" >> $job
	echo "echo CMD:  $bids_dir $out_dir $level $base_opts $options" >>$job
	echo "echo START_TIME: \`date\`" >>$job
	echo "export SCRATCH_DIR=/scratch/${USER}/\${SLURM_JOB_ID}" >> $job
	echo "mkdir -p \$SCRATCH_DIR" >> $job
	echo "cd `pwd`" >> $job
	echo singularity run $SINGULARITY_OPTS $singularity_image $bids_dir $out_dir $level $base_opts $options >> $job
	echo "RETURNVAL=\$?" >> $job
	echo "rm -rf \$SCRATCH_DIR" >> $job
	echo "echo RETURNVAL=\$RETURNVAL" >>$job
	echo "echo END_TIME: \`date\`" >>$job
	echo "exit \$RETURNVAL" >> $job

	
	echo -n "		Queuing group-level job, $depends ... " >&2
fi


if [ "$testmode" == 0 ]
then
message=`sbatch --dependency=$depends $job`


# Extract job identifier from SLURM's message.
if ! echo ${message} | grep -q "[1-9][0-9]*$"; then 
	echo "Job(s) submission failed." >&2
	echo ${message} >&2
	exit 1
else
	jobid=$(echo ${message} | grep -oh "[1-9][0-9]*$")
fi
echo "jobid=$jobid" >&2
exec_job=$job_dir/$app_name.$level.$jobid.job

#copy instance of this job script for provenance
cp  $job $exec_job

else
	jobid=$RANDOM
	echo "fake-jobid=$jobid  (test-mode: no jobs submitted)" >&2

fi

echo "Job and job output stored in: $job_dir" >&2
echo $jobid

exit 0
