#!/bin/bash


if [ "$#" -lt 1 ]
then 
   echo""
   echo "=========================================================================="
   echo "Interface for running list of jobs on cluster"
   echo ""
   echo "  Loops through an input job_txt (txt with command on each line)"
   echo ""
   echo "--------------------------------------------------------------------------"
   echo "Usage: $cmdname  <job_list>  <optional flags> "
   echo "--------------------------------------------------------------------------"
   echo ""
   echo "optional flags:"
   echo ""
   echo " -t : test-mode, don/'t actually submit any jobs"
   echo ""
   echo " Required resources:"
   echo " -j <job-template> :  sets requested resources"
   echo "	Regular (default):	8core/32gb/24h"
   echo "	LongSkinny:		1core/4gb/72h"
   echo "	ShortFat:		32core/128gb/3h"
   echo ""
   echo " SLURM Job dependencies for pipelining (man sbatch for more details):"
   echo "  -d aftercorr:jobid[:jobid]	: each subj depends on completed subj in submitted job ids"  
   echo "  -d afterok:jobid[:jobid]	: each subj depends on all completed subj in submitted job id"
   echo ""

  exit 1
fi


output_dir=`realpath $PWD`

joblist=$1
shift 1
job_template=Regular
depends=""
testmode=0

while getopts "j:td:" options; do
 case $options in
    j ) echo "	Using job template: $OPTARG" >&2
	job_template=$OPTARG;;
    d ) echo "	Using dependencies: $OPTARG" >&2
	depends=$OPTARG;;
    t ) echo "	Using test-mode (no submit jobs)" >&2
	testmode=1;;
    * ) usage
	exit 1;;
 esac
done


#check subjlist validity and get # of subjects
if [ -f $joblist ]
then
	N=`cat  $joblist | wc -l`
else
 	echo "joblist does not exist: $joblist" >&2
	exit 1
fi

indices=1-$N

job_dir=$output_dir/jobs
mkdir -p $job_dir

jobname=${joblist##*/} #strip leading path
job=$job_dir/$jobname.job

execpath=`dirname $0`
execpath=`realpath $execpath`
cp $execpath/job-templates/${job_template}.job $job  

echo "#SBATCH --job-name=$jobname" >> $job

#submit with array, using subj and subjlist, indexed by line number (1-N)
echo "#SBATCH --output=$job_dir/${jobname}.%A_%a.out" >> $job
echo "#SBATCH --array=$indices" >> $job

echo "cmd=\`head -n \$SLURM_ARRAY_TASK_ID `realpath $joblist`  | tail -n 1\`" >> $job
echo cd `pwd` >> $job
echo "echo CMD: \$cmd " >>$job
echo "echo START_TIME: \`date\`" >>$job
echo "\$cmd" >> $job
echo "RETURNVAL=\$?" >> $job
echo "echo RETURNVAL=\$RETURNVAL" >>$job
echo "echo END_TIME: \`date\`" >>$job
echo "exit \$RETURNVAL" >> $job
	

if [ "$testmode" == 0 ]
then
message=`sbatch --dependency=$depends $job`

# Extract job identifier from SLURM's message.
if ! echo ${message} | grep -q "[1-9][0-9]*$"; then 
	echo "Job(s) submission failed." >&2
	echo ${message} >&2
	exit 1
else
	jobid=$(echo ${message} | grep -oh "[1-9][0-9]*$")
fi
echo "jobid=$jobid" >&2
exec_job=$job_dir/$scriptname.$jobid.job

#copy instance of this job script for provenance
cp  $job $exec_job

else
	jobid=$RANDOM
	echo "fake-jobid=$jobid  (test-mode: no jobs submitted)" >&2
fi

echo $jobid

exit 0
